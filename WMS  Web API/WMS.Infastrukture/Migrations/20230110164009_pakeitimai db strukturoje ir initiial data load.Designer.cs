// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WMS.Infastrukture.Database;

#nullable disable

namespace WMS.Infastrukture.Migrations
{
    [DbContext(typeof(WMSContext))]
    [Migration("20230110164009_pakeitimai db strukturoje ir initiial data load")]
    partial class pakeitimaidbstrukturojeirinitiialdataload
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.12");

            modelBuilder.Entity("WMS.Domain.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LegalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Testavimo g. 1",
                            City = "Vilnius",
                            ContactPerson = "Contact Person",
                            Country = "Lietuva",
                            Created = new DateTime(2023, 1, 10, 18, 40, 9, 337, DateTimeKind.Local).AddTicks(1347),
                            Email = "test@test.com",
                            LegalCode = "123456789",
                            Name = "UAB Bandymas",
                            PhoneNumber = "Phone Number",
                            PostCode = "LT-12345",
                            Status = true
                        });
                });

            modelBuilder.Entity("WMS.Domain.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("WMS.Domain.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExecutionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("WMSuserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("WMSuserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WMS.Domain.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("WMS.Domain.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "New Order Ready",
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Order Completed",
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Order Canceled",
                            Name = "Canceled"
                        });
                });

            modelBuilder.Entity("WMS.Domain.Models.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Receiving of goods",
                            Name = "Inbound"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Moving inventory out of warehouse",
                            Name = "Outbound"
                        });
                });

            modelBuilder.Entity("WMS.Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Volume")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Weigth")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Daugiafunkcis spausdintuvas",
                            Name = "Epson ECOTANK L3256",
                            SKU = "A-000001",
                            Volume = 0.023292375m,
                            Weigth = 3.9m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Daugiafunkcis spausdintuvas",
                            Name = "Kyocera Ecosys M5526CDW",
                            SKU = "A-000002",
                            Volume = 0.0903m,
                            Weigth = 26m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Televizorius",
                            Name = "Samsung QE55Q60BAUXXH, QLED, 55",
                            SKU = "A-000003",
                            Volume = 0.026199m,
                            Weigth = 15.8m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Įmontuojamas šaldytuvas",
                            Name = "Whirlpool SP40 802 EU 2",
                            SKU = "A-000004",
                            Volume = 0.7257765m,
                            Weigth = 74m
                        },
                        new
                        {
                            Id = 5,
                            Description = "Indukcinė viryklė su elektrine orkaite",
                            Name = "Gorenje Advanced Line GEIT5C60BPG",
                            SKU = "A-000005",
                            Volume = 0.25075m,
                            Weigth = 42m
                        },
                        new
                        {
                            Id = 6,
                            Description = "Įmontuojama indaplovė",
                            Name = "Electrolux EEM69410L",
                            SKU = "A-000006",
                            Volume = 0.262845m,
                            Weigth = 38.39m
                        },
                        new
                        {
                            Id = 7,
                            Description = "Skalbimo mašina",
                            Name = "Beko WUE6511BS, 6 kg, balta",
                            SKU = "A-000007",
                            Volume = 0.22176m,
                            Weigth = 35m
                        },
                        new
                        {
                            Id = 8,
                            Description = "Džiovyklė",
                            Name = "Samsung DV90T6240LE/S7",
                            SKU = "A-000008",
                            Volume = 0.306m,
                            Weigth = 50m
                        },
                        new
                        {
                            Id = 9,
                            Description = "Įmontuojamas gartraukis",
                            Name = "Faber Flexa NG AM/XA60",
                            SKU = "A-000009",
                            Volume = 0.03024m,
                            Weigth = 7.5m
                        },
                        new
                        {
                            Id = 10,
                            Description = "Šaldiklis",
                            Name = "Beko RFNE312E43XN",
                            SKU = "A-000010",
                            Volume = 0.7215m,
                            Weigth = 70m
                        });
                });

            modelBuilder.Entity("WMS.Domain.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Warehouse Management System Administrator",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Warehouse Manager",
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Warehouse Supervisor",
                            Name = "Supervisor"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Warehouse Client",
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("WMS.Domain.Models.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExecutionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ShipmentStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WMSuserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShipmentStatusId");

                    b.HasIndex("WMSuserId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("WMS.Domain.Models.ShipmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("ShipmentItems");
                });

            modelBuilder.Entity("WMS.Domain.Models.ShipmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ShipmentStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Goods arrived to warehouse",
                            Name = "Arrived"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Warehouse loading of the goods complete",
                            Name = "Loading Complete"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Goods dispached from warehouse",
                            Name = "Dispached"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Goods dispatching complete",
                            Name = "Dispatching Complete"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Awaiting goods arrival",
                            Name = "Awaiting Arrival"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Awaiting goods dispatch",
                            Name = "Awaiting Dispatch"
                        });
                });

            modelBuilder.Entity("WMS.Domain.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalVolume")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalWeigth")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Sektorius Nr.1",
                            Location = "Vilnius, Sandėlių gatve",
                            Name = "Sandėlis Nr.1",
                            TotalVolume = 100m,
                            TotalWeigth = 200m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sektorius Nr.2",
                            Location = "Vilnius, Sandėlių gatve",
                            Name = "Sandėlis Nr.2",
                            TotalVolume = 200m,
                            TotalWeigth = 250m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Sektorius Nr.3",
                            Location = "Vilnius, Sandėlių gatve",
                            Name = "Sandėlis Nr.3",
                            TotalVolume = 300m,
                            TotalWeigth = 400m
                        });
                });

            modelBuilder.Entity("WMS.Domain.Models.WMSuser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("WMSusers");
                });

            modelBuilder.Entity("WMS.Domain.Models.Inventory", b =>
                {
                    b.HasOne("WMS.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WMS.Domain.Models.Order", b =>
                {
                    b.HasOne("WMS.Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Models.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Models.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Models.WMSuser", "RWMSuser")
                        .WithMany()
                        .HasForeignKey("WMSuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");

                    b.Navigation("OrderType");

                    b.Navigation("RWMSuser");
                });

            modelBuilder.Entity("WMS.Domain.Models.OrderItem", b =>
                {
                    b.HasOne("WMS.Domain.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WMS.Domain.Models.Shipment", b =>
                {
                    b.HasOne("WMS.Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Models.ShipmentStatus", "ShipmentStatus")
                        .WithMany()
                        .HasForeignKey("ShipmentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Models.WMSuser", "RWMSuser")
                        .WithMany()
                        .HasForeignKey("WMSuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("RWMSuser");

                    b.Navigation("ShipmentStatus");
                });

            modelBuilder.Entity("WMS.Domain.Models.ShipmentItem", b =>
                {
                    b.HasOne("WMS.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMS.Domain.Models.Shipment", "Shipment")
                        .WithMany("ShipmentItems")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("WMS.Domain.Models.WMSuser", b =>
                {
                    b.HasOne("WMS.Domain.Models.Role", "Role")
                        .WithMany("WMSusers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WMS.Domain.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("WMS.Domain.Models.Role", b =>
                {
                    b.Navigation("WMSusers");
                });

            modelBuilder.Entity("WMS.Domain.Models.Shipment", b =>
                {
                    b.Navigation("ShipmentItems");
                });
#pragma warning restore 612, 618
        }
    }
}
